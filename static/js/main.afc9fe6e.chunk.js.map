{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Papa","require","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fileReader","FileReader","state","rawData","jsonData","formattedid","scheduleState","owner","onAddInProgress","onAddDefined","onAddAccepted","onAddComleted","react_default","a","createElement","data","index","map","key","val","filter","e","includes","target","value","toUpperCase","setState","loadOndata","console","log","ownerData","csvf","filecontent","_this2","reader","onload","evt","readyState","error","alert","result","parse","header","s","readAsText","files","OnAddInProgress","OnAddDefined","OnAddAccepted","OnAddComleted","isNaN","parseFloat","_this3","headerData","rowda","renderData","id","className","type","accept","onChange","csvJSON","placeholder","onChangeID","bind","onChangeSchedule","onChangeOwner","align","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.afc9fe6e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nconst Papa = require('papaparse')\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.fileReader = new FileReader();\r\n        this.state = {\r\n            rawData: [],\r\n            jsonData: [],\r\n            formattedid: '',\r\n            scheduleState: '',\r\n            owner: ''\r\n        }\r\n        this.onAddInProgress=0\r\n        this.onAddDefined=0\r\n        this.onAddAccepted=0\r\n        this.onAddComleted=0\r\n    }\r\n\r\n    headerData() {\r\n        return (\r\n            <thead>\r\n            <tr>\r\n                <th>Formatted ID</th>\r\n                <th>Name</th>\r\n                <th>Schedule State</th>\r\n                <th>Plan Estimate</th>\r\n                <th>Task Estimate Total</th>\r\n                <th>Task Actual Total</th>\r\n                <th>Task Remaining Total</th>\r\n                <th>Owner</th>\r\n                <th>Tag</th>\r\n                <th>Ready</th>\r\n            </tr>\r\n            </thead>);\r\n    }\r\n\r\n    rowData(data, index) {\r\n\r\n    }\r\n\r\n    renderData() {\r\n\r\n        return this.state.jsonData.map((data, index) => {\r\n            return (<tbody><tr key={index}>\r\n                    <td>{data['Formatted ID']}</td>\r\n                    <td>{data['Name']}</td>\r\n                    <td>{data['Schedule State']}</td>\r\n                    <td>{data['Plan Estimate']}</td>\r\n                    <td>{data['Task Estimate Total']}</td>\r\n                    <td>{data['Task Actual Total']}</td>\r\n                    <td>{data['Task Remaining Total']}</td>\r\n                    <td>{data['Owner']}</td>\r\n                    <td>{data['Tags']}</td>\r\n                    <td>{data['Ready']}</td>\r\n                </tr></tbody>\r\n            )\r\n        })\r\n    }\r\n\r\n    onChangeID(val) {\r\n        const data = this.state.rawData.filter(e => e['Formatted ID'].includes((val.target.value).toUpperCase()));\r\n         this.setState({\r\n            formattedid: val.target.value,\r\n            jsonData: data\r\n        })\r\n        this.loadOndata()\r\n    }\r\n\r\n    onChangeSchedule(val) {\r\n        const data=this.state.rawData.filter(e => {\r\n            if(e['Schedule State'])\r\n            return e['Schedule State'].includes((val.target.value))\r\n            return console.log(e);\r\n        });\r\n\r\n        this.setState({\r\n            scheduleState: val.target.value,\r\n            jsonData: data\r\n        })\r\n        this.loadOndata()\r\n    }\r\n\r\n    onChangeOwner(val) {\r\n        const ownerData=this.state.rawData.filter(e => {\r\n            if(e['Owner'])\r\n                return e['Owner'].includes((val.target.value))\r\n            return console.log(e);\r\n        });\r\n\r\n        this.setState({\r\n            owner: val.target.value,\r\n            jsonData: ownerData\r\n        })\r\n        this.loadOndata()\r\n    }\r\n\r\n    csvJSON(csvf) {\r\n        var reader = new FileReader();\r\n        let filecontent;\r\n        reader.onload = (evt) => {\r\n            if (evt.target.readyState !== 2) return;\r\n            if (evt.target.error) {\r\n                alert('Error while reading file');\r\n                return;\r\n            }\r\n            filecontent = evt.target.result;\r\n            //console.log(filecontent)\r\n            const {data} = Papa.parse(filecontent, {header: true})\r\n\r\n            this.setState({\r\n                rawData: data,\r\n                jsonData: data\r\n            })\r\n            console.log(Papa.parse(filecontent, {header: true}))\r\n            console.log(this.state.jsonData)\r\n            var s = this.state.jsonData.filter(e => console.log(e['Schedule State']) === 'Defined')\r\n            console.log('state', s)\r\n            this.loadOndata();\r\n        };\r\n        reader.readAsText(csvf.target.files[0]);\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    loadOndata(){\r\n        this.onAddInProgress=this.OnAddInProgress()\r\n        this.onAddDefined=this.OnAddDefined()\r\n        this.onAddAccepted=this.OnAddAccepted()\r\n        this.onAddComleted=this.OnAddComleted()\r\n    }\r\n\r\n    OnAddInProgress() {\r\n        let s = 0;\r\n        this.state.jsonData.map(e => {\r\n            if (e['Schedule State'] === 'InProgress' && !isNaN(e['Plan Estimate']) && e['Plan Estimate'])\r\n                s +=parseFloat(e['Plan Estimate']);\r\n\r\n            return console.log(e);\r\n\r\n        });\r\n        return s\r\n    }\r\n\r\n    OnAddDefined() {\r\n        console.log(\"working\"+this.state.jsonData);\r\n        let s = 0;\r\n        this.state.jsonData.map(e => {\r\n            if (e['Schedule State'] === 'Defined' && !isNaN(e['Plan Estimate']) && e['Plan Estimate'])\r\n                s +=parseFloat(e['Plan Estimate']);\r\n            return console.log(e);\r\n        });\r\n        return s\r\n    }\r\n\r\n    OnAddAccepted() {\r\n        let s = 0;\r\n        this.state.jsonData.map(e => {\r\n            if (e['Schedule State'] === 'Accepted' && !isNaN(e['Plan Estimate']) && e['Plan Estimate']) {\r\n                console.log(\"testing\",e['Plan Estimate'])\r\n                s += parseFloat(e['Plan Estimate']);\r\n            }\r\n            return console.log(e);\r\n        })\r\n\r\n        return s\r\n\r\n    }\r\n\r\n    OnAddComleted() {\r\n        let s = 0;\r\n        this.state.jsonData.map(e => {\r\n            if (e['Schedule State'] === 'Completed' && !isNaN(e['Plan Estimate']))\r\n                s +=parseFloat(e['Plan Estimate']);\r\n            return console.log(e);\r\n        })\r\n        return s\r\n    }\r\n\r\n    render() {\r\n        console.log('render', this.state)\r\n        const header = this.headerData()\r\n        const rowda = this.renderData()\r\n        return (\r\n            <div id=\"in\">\r\n                <div className=\"App\">\r\n                    <div>\r\n                        <h1>ALTIMETRIK INDIA PRIVATE LIMITED</h1>\r\n                        <h2>DASH BOARD</h2>\r\n                        <input type=\"file\" accept=\".csv\" onChange={(e) => this.csvJSON(e)}/>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"text\"\r\n                               placeholder=\"FilterBy Formatted Id..\"\r\n                               value={this.state.formattedid}\r\n                               onChange={this.onChangeID.bind(this)}/>\r\n\r\n                        <input type=\"text\"\r\n                               placeholder=\"Search by schedule state...\"\r\n                               value={this.state.scheduleState}\r\n                               onChange={this.onChangeSchedule.bind(this)}\r\n                        />\r\n                        <input type=\"text\"\r\n                               value={this.state.owner}\r\n                               placeholder=\"Search by owner...\"\r\n                               onChange={this.onChangeOwner.bind(this)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"hrLine\">\r\n                        <hr/>\r\n                    </div>\r\n                    <div className=\"totalDetals\">\r\n                        <table id=\"details\">\r\n                            <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <div className=\"totalDetals\">\r\n                                        <h2>Total PlanEstimate according to schedulestates :</h2>\r\n                                        <table align='center'>\r\n                                            <tbody>\r\n                                            <tr>\r\n                                                <th>InProgress</th>\r\n                                                <th>Defined</th>\r\n                                                <th>Accepted</th>\r\n                                                <th>Completed</th>\r\n                                                <th>Total</th>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>{this.onAddInProgress}</td>\r\n                                                <td>{this.onAddDefined}</td>\r\n                                                <td>{this.onAddAccepted}</td>\r\n                                                <td>{this.onAddComleted}</td>\r\n                                                <td>{this.onAddInProgress + this.onAddDefined + this.onAddAccepted + this.onAddComleted}</td>\r\n                                            </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    <table>\r\n                        {header}\r\n                        {rowda}\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}